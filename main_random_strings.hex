#include <std/mem.pat>  
#include <std/string.pat>
#include <civ6save.hexpat>

// s128 start = std::mem::find_sequence(0x0000000E, 0x0000000F, 0x00000006);
#pragma pattern_limit 1048576


s128 start = 0x0010B933;
u32 numTiles @ start - 4;
Tile tiles[numTiles] @ start;

std::string::SizedString<u32> str_00 @ 0x001430C0;
std::string::SizedString<u32> str_01 @ 0x001430E1;

std::string::SizedString<u32> str00 @ 0x00155C07;
std::string::SizedString<u32> str01 @ 0x001565C6;
std::string::SizedString<u32> str02 @ 0x00156FEB;
std::string::SizedString<u32> str03 @ 0x0015728F;
std::string::SizedString<u32> str04 @ 0x00157531;
std::string::SizedString<u32> str05 @ 0x001577D2;
std::string::SizedString<u32> str06 @ 0x00157A71;
std::string::SizedString<u32> str07 @ 0x00157D13;
std::string::SizedString<u32> str08 @ 0x00157FB5;
std::string::SizedString<u32> str09 @ 0x00158254;
std::string::SizedString<u32> str10 @ 0x001584F5;
std::string::SizedString<u32> str11 @ 0x00158A16;
std::string::SizedString<u32> str12 @ 0x0015A341;
std::string::SizedString<u32> str13 @ 0x0015D7FE;
std::string::SizedString<u32> str14 @ 0x0015F123;
std::string::SizedString<u32> str15 @ 0x00161BDC;
std::string::SizedString<u32> str16 @ 0x0016238B;
std::string::SizedString<u32> str17 @ 0x00165FD5;
std::string::SizedString<u32> str18 @ 0x001664F4;
std::string::SizedString<u32> str19 @ 0x0016DB84;

std::string::SizedString<u32> str20 @ 0x001806FE;
std::string::SizedString<u32> str21 @ 0x00180752;
std::string::SizedString<u32> str22 @ 0x001807AC;
std::string::SizedString<u32> str23 @ 0x00180800;
std::string::SizedString<u32> str24 @ 0x00180838;
std::string::SizedString<u32> str25 @ 0x00180890;
std::string::SizedString<u32> str26 @ 0x001808F1;

struct NumberList {
    u32 value;
    u32 zero;
};
u32 NumbersAddress = 0x00181CFA;
u32 NumNumbers @ NumbersAddress;
NumberList numbers[NumNumbers] @ NumbersAddress + 4;



std::string::SizedString<u32> str30 @ 0x001A2706;
std::string::SizedString<u32> str31 @ 0x001A28DF;

struct SomeStringStructSuffix {
    u32 numArgs;
    std::string::SizedString<u32> s;
    u32 args[numArgs];
    u32 unknown;
};

struct NumVals {
    u32 num;
    u32 vals[num];
};

SomeStringStructSuffix ssss40 @ 0x001E9B81;
NumVals ssss40_numVals[2] @ 0x001E9BA7;

SomeStringStructSuffix ssss41 @ 0x001E9C03-4;
NumVals ssss41_numVals @ 0x001E9C48;

SomeStringStructSuffix ssss42 @ 0x001E9C6C-4;
NumVals ssss42_numVals @ 0x001E9CB3;

SomeStringStructSuffix ssss43 @ 0x001E9CC7-4;
SomeStringStructSuffix ssss44 @ 0x001E9CE6-4;
SomeStringStructSuffix ssss45 @ 0x001E9D0B-4;
SomeStringStructSuffix ssss46 @ 0x001E9D36-4;
SomeStringStructSuffix ssss47 @ 0x001E9D60-4;
NumVals ssss47_numVals[2] @ 0x001E9D82;

SomeStringStructSuffix ssss48 @ 0x001E9DDE-4;
NumVals ssss48_numVals @ 0x001E9E23;
SomeStringStructSuffix ssss49 @ 0x001E9E47-4;
NumVals ssss49_numVals @ 0x001E9E8E;

SomeStringStructSuffix ssss50 @ 0x001E9EA2-4;
SomeStringStructSuffix ssss51 @ 0x001E9EC1-4;
SomeStringStructSuffix ssss52 @ 0x001E9EE6-4;
SomeStringStructSuffix ssss53 @ 0x001E9F11-4;

SomeStringStructSuffix ssss54 @ 0x001E9F3B-4;
NumVals ssss54_numVals[2] @ 0x001E9F5D; // 1 byte overlap with previous struct

SomeStringStructSuffix ssss55 @ 0x001E9FB9-4;
NumVals ssss55_numVals @ 0x001E9FFE;

SomeStringStructSuffix ssss56 @ 0x001EA01E;
NumVals ssss56_numVals @ 0x001EA069;

SomeStringStructSuffix ssss57[4] @ 0x001EA079;

SomeStringStructSuffix ssss58 @ 0x001EA112;
NumVals ssss58_numVals @ 0x001EA138; // 5 bytes overlap with previous struct

SomeStringStructSuffix ssss59 @ 0x001EA190;
SomeStringStructSuffix ssss60 @ 0x001EA1F9;

SomeStringStructSuffix ssss61[4] @ 0x001EA254;
SomeStringStructSuffix ssss62 @ 0x001EA2ED;
SomeStringStructSuffix ssss63 @ 0x001EA36B;
SomeStringStructSuffix ssss64 @ 0x001EA3D4;
SomeStringStructSuffix ssss65[4] @ 0x001EA42F;
SomeStringStructSuffix ssss66 @ 0x001EA4C8;

SomeStringStructSuffix ssss67 @ 0x001EA54F-4;
SomeStringStructSuffix ssss68 @ 0x001EA5BB-4;

SomeStringStructSuffix ssss69[4] @ 0x001EA613;
SomeStringStructSuffix ssss70 @ 0x001EA6AC;
SomeStringStructSuffix ssss71 @ 0x001EA6FF;
SomeStringStructSuffix ssss72 @ 0x001EA767;
SomeStringStructSuffix ssss73 @ 0x001EA7C9;
SomeStringStructSuffix ssss74 @ 0x001EA7FB;
SomeStringStructSuffix ssss75 @ 0x001EA84E;
SomeStringStructSuffix ssss76 @ 0x001EA8B6;
SomeStringStructSuffix ssss77 @ 0x001EA918;
SomeStringStructSuffix ssss78 @ 0x001EA94A;
SomeStringStructSuffix ssss79 @ 0x001EA99D;
SomeStringStructSuffix ssss80 @ 0x001EAA05;
SomeStringStructSuffix ssss81 @ 0x001EAA67;
SomeStringStructSuffix ssss82 @ 0x001EAA99;
SomeStringStructSuffix ssss83 @ 0x001EAAF5;
SomeStringStructSuffix ssss84 @ 0x001EAB62;
SomeStringStructSuffix ssss85 @ 0x001EABBE;
SomeStringStructSuffix ssss86 @ 0x001EABF0;
SomeStringStructSuffix ssss87 @ 0x001EAC43;


std::string::SizedString<u32> str100 @ 0x001EE708;
